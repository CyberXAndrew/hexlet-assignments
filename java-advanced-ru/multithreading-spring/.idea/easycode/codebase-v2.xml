<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/examples/Example.java;/home/and/Hexlet/hexlet-assignments/java-advanced-ru/multithreading-spring/src/main/java/exercise/controller/UsersController.java;/home/and/Hexlet/hexlet-assignments/java-advanced-ru/multithreading-spring/src/main/java/exercise/controller/WelcomeController.java;/home/and/Hexlet/hexlet-assignments/java-advanced-ru/multithreading-spring/src/main/java/exercise/model/User.java;/home/and/Hexlet/hexlet-assignments/java-advanced-ru/multithreading-spring/src/main/java/exercise/repository/UserRepository.java;/home/and/Hexlet/hexlet-assignments/java-advanced-ru/multithreading-spring/src/main/java/exercise/service/UserService.java;/home/and/Hexlet/hexlet-assignments/java-advanced-ru/multithreading-spring/src/main/java/exercise/App.java;/home/and/Hexlet/hexlet-assignments/java-advanced-ru/multithreading-spring/src/main/resources/db/changelog/db.changelog-master.yaml;/home/and/Hexlet/hexlet-assignments/java-advanced-ru/multithreading-spring/src/test/java/exercise/AppTest.java;/home/and/Hexlet/hexlet-assignments/java-advanced-ru/multithreading-spring/src/test/java/exercise/TestUtils.java;/home/and/Hexlet/hexlet-assignments/java-advanced-ru/multithreading-spring/README.html;/home/and/Hexlet/hexlet-assignments/java-advanced-ru/multithreading-spring/README.md" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;/home/and/Hexlet/hexlet-assignments/java-advanced-ru/multithreading-spring&quot;:&quot;{\&quot;/examples/Example.java\&quot;:\&quot;\\n class Car {\\nic interface CarRepository extends ReactiveCrudRepository\\u003cCar, Integer\\u003e {\\nз методов сервиса возвращаем типы Reactor Flux\\u003cT\\u003e или Mono\\u003cT\\u003e\\npublic Flux\\u003cCar\\u003e getCars() {\&quot;,\&quot;/src/main/java/exercise/controller/WelcomeController.java\&quot;:\&quot;\\n@RestController\&quot;,\&quot;/src/main/java/exercise/App.java\&quot;:\&quot;\\n@EnableR2dbcRepositories()\&quot;,\&quot;/src/main/java/exercise/model/User.java\&quot;:\&quot;\\n@Getter\&quot;,\&quot;/src/main/java/exercise/repository/UserRepository.java\&quot;:\&quot;\&quot;,\&quot;/src/main/java/exercise/service/UserService.java\&quot;:\&quot;\\n@Service\&quot;,\&quot;/src/test/java/exercise/AppTest.java\&quot;:\&quot;\\n@SpringBootTest(webEnvironment \\u003d SpringBootTest.WebEnvironment.RANDOM_PORT)\&quot;,\&quot;/README.md\&quot;:\&quot;\&quot;,\&quot;/README.html\&quot;:\&quot;\\n\\u003chtml\\u003e\\n  \\u003cbody\\u003e\\n    iv class\\u003d\\\&quot;marpit\\\&quot;\\u003e\\u003csvg data-marpit-svg\\u003d\\\&quot;\\\&quot; viewBox\\u003d\\\&quot;0 0 1280 5000\\\&quot;\\u003e\\u003cforeignObject width\\u003d\\\&quot;1280\\\&quot; height\\n      vg data-marpit-svg\\u003d\\\&quot;\\\&quot; viewBox\\u003d\\\&quot;0 0 1280 5000\\\&quot;\\u003e\\u003cforeignObject width\\u003d\\\&quot;1280\\\&quot; height\\u003d\\\&quot;5000\\\&quot;\\u003e\\u003csection id\\u003d\\n        oreignObject width\\u003d\\\&quot;1280\\\&quot; height\\u003d\\\&quot;5000\\\&quot;\\u003e\\u003csection id\\u003d\\\&quot;1\\\&quot; data-marpit-fragments\\u003d\\\&quot;11\\\&quot;\\u003e\\n          ection id\\u003d\\\&quot;1\\\&quot; data-marpit-fragments\\u003d\\\&quot;11\\\&quot;\\u003e\\n             задании мы познакомимся с модулем Spring WebFlux, который позволяет писать асинхронный неблокирующи\\n            mons/docs/current/api/org/springframework/data/repository/reactive/ReactiveCrudRepository.html\\\&quot;\\u003eРепо\\n              docs/current/api/org/springframework/data/repository/reactive/ReactiveCrudRepository.html\\\&quot;\\u003eРепозитор\\n              h2\\u003e\\n                data-marpit-fragment\\u003d\\\&quot;3\\\&quot;\\u003eИзучите код в файле \\u003cem\\u003ebuild.gradle\\u003c/em\\u003e. Обратите внимание, какие зависим\\n            ите конфигурацию приложения. Обратите внимание на комментарии в коде\\u003c/li\\u003e\\n              онфигурацию приложения. Обратите внимание на комментарии в коде\\u003c/li\\u003e\\n            rsistance\\u003c/code\\u003e не используются в Spring Webflux.\\u003c/li\\u003e\\n            рый будет реализовывать интерфейс \\u003ccode\\u003eReactiveCrudRepository\\u003c/code\\u003e. Этот интерфейс позволяет испо\\n              удет реализовывать интерфейс \\u003ccode\\u003eReactiveCrudRepository\\u003c/code\\u003e. Этот интерфейс позволяет использов\\n            у нашего приложения вынесем в отдельный сервис. В файле уже создан класс сервиса \\u003ccode\\u003eUserService\\u003c/\\n              его приложения вынесем в отдельный сервис. В файле уже создан класс сервиса \\u003ccode\\u003eUserService\\u003c/code\\u003e\\n            ый на аннотациях \\u003ccode\\u003eorg.springframework.web.bind.annotation\\u003c/code\\u003e уже знаком нам, поэтому мы буд\\n            ера должны возвращать тип \\u003ccode\\u003eMono\\u0026lt;T\\u0026gt;\\u003c/code\\u003e.\\u003c/p\\u003e\\n              олжны возвращать тип \\u003ccode\\u003eMono\\u0026lt;T\\u0026gt;\\u003c/code\\u003e.\\u003c/p\\u003e\\n            ких пользователей.\\u003c/p\\u003e\\n            in-block-end: 1em; margin-inline-start: 0px; margin-inline-end: 0px; font-weight: bold;\\\&quot;},h4:{proto:\\n              ock-end: 1em; margin-inline-start: 0px; margin-inline-end: 0px; font-weight: bold;\\\&quot;},h4:{proto:()\\u003d\\u003eH\\n                art: 0px; margin-inline-end: 0px; font-weight: bold;\\\&quot;},h4:{proto:()\\u003d\\u003eHTMLHeadingElement,attrs:{role:\\n              argin-block-start: 1.67em; margin-block-end: 1.67em; margin-inline-start: 0px; margin-inline-end: 0p\\n                gin-block-end: 1.67em; margin-inline-start: 0px; margin-inline-end: 0px; font-weight: bold;\\\&quot;},h6:{pr\\n             0px; font-weight: bold;\\\&quot;},span:{proto:()\\u003d\\u003eHTMLSpanElement},pre:{proto:()\\u003d\\u003eHTMLElement,style:\\\&quot;displa\\n               font-weight: bold;\\\&quot;},span:{proto:()\\u003d\\u003eHTMLSpanElement},pre:{proto:()\\u003d\\u003eHTMLElement,style:\\\&quot;display: bl\\n              -auto-scaling-wrapper\\\&quot;,i\\u003d\\\&quot;data-marp-auto-scaling-svg\\\&quot;,n\\u003d\\\&quot;data-marp-auto-scaling-container\\\&quot;;class s e\\n                marp-auto-scaling-svg\\\&quot;,n\\u003d\\\&quot;data-marp-auto-scaling-container\\\&quot;;class s extends HTMLElement{constructor(\&quot;,\&quot;/src/main/java/exercise/controller/UsersController.java\&quot;:\&quot;\\n@RestController\&quot;,\&quot;/src/test/java/exercise/TestUtils.java\&quot;:\&quot;\\npublic class TestUtils {\&quot;}&quot;}" />
  </component>
</project>